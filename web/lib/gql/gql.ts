/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "fragment CollectionFilterFields on Collection {\n  id\n  title\n}\n\nfragment CollectionFields on Collection {\n  id\n  title\n  handle\n}\n\nfragment CollectionDetailsFields on Collection {\n  id\n  title\n  handle\n  description\n  image {\n    ...ImageFields\n  }\n  updatedAt\n}": typeof types.CollectionFilterFieldsFragmentDoc,
    "fragment ImageFields on Image {\n  id\n  url\n  altText\n  width\n  height\n}\n\nfragment MoneyFields on MoneyV2 {\n  amount\n  currencyCode\n}\n\nfragment PageInfoFields on PageInfo {\n  hasNextPage\n  endCursor\n  hasPreviousPage\n  startCursor\n}": typeof types.ImageFieldsFragmentDoc,
    "fragment ProductFields on Product {\n  id\n  title\n  handle\n  status\n  vendor\n  productType\n  tags\n  totalInventory\n  createdAt\n  updatedAt\n  featuredImage {\n    ...ImageFields\n  }\n  variants(first: 100) {\n    nodes {\n      ...VariantFields\n    }\n  }\n  collections(first: 10) {\n    edges {\n      node {\n        ...CollectionFields\n      }\n    }\n  }\n}\n\nfragment ProductCardFields on Product {\n  id\n  title\n  handle\n  vendor\n  featuredImage {\n    ...ImageFields\n  }\n  priceRange {\n    minVariantPrice {\n      ...MoneyFields\n    }\n    maxVariantPrice {\n      ...MoneyFields\n    }\n  }\n}\n\nfragment VariantFields on ProductVariant {\n  id\n  title\n  price\n  compareAtPrice\n  sku\n  barcode\n  inventoryQuantity\n  availableForSale\n  selectedOptions {\n    name\n    value\n  }\n  image {\n    ...ImageFields\n  }\n  inventoryItem {\n    tracked\n  }\n}": typeof types.ProductFieldsFragmentDoc,
    "query GetCollectionsForFilters($query: String, $first: Int!, $after: String) {\n  collections(first: $first, after: $after, query: $query, sortKey: TITLE) {\n    edges {\n      node {\n        ...CollectionFilterFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n  products(first: 100) {\n    edges {\n      node {\n        productType\n        status\n      }\n    }\n  }\n}\n\nquery GetCollections($first: Int!, $after: String, $query: String) {\n  collections(first: $first, after: $after, query: $query) {\n    edges {\n      node {\n        ...CollectionFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n}\n\nquery GetCollectionByHandle($handle: String!) {\n  collectionByHandle(handle: $handle) {\n    ...CollectionDetailsFields\n    products(first: 50) {\n      edges {\n        node {\n          ...ProductCardFields\n        }\n        cursor\n      }\n      pageInfo {\n        ...PageInfoFields\n      }\n    }\n  }\n}": typeof types.GetCollectionsForFiltersDocument,
    "query GetProducts($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        ...ProductFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n}\n\nquery GetProductById($id: ID!) {\n  product(id: $id) {\n    id\n    title\n    handle\n    vendor\n    productType\n    tags\n    totalInventory\n  }\n}": typeof types.GetProductsDocument,
    "query GetShopInfo {\n  shop {\n    currencyCode\n    myshopifyDomain\n    email\n    name\n    plan {\n      displayName\n    }\n    billingAddress {\n      countryCode\n    }\n  }\n}": typeof types.GetShopInfoDocument,
};
const documents: Documents = {
    "fragment CollectionFilterFields on Collection {\n  id\n  title\n}\n\nfragment CollectionFields on Collection {\n  id\n  title\n  handle\n}\n\nfragment CollectionDetailsFields on Collection {\n  id\n  title\n  handle\n  description\n  image {\n    ...ImageFields\n  }\n  updatedAt\n}": types.CollectionFilterFieldsFragmentDoc,
    "fragment ImageFields on Image {\n  id\n  url\n  altText\n  width\n  height\n}\n\nfragment MoneyFields on MoneyV2 {\n  amount\n  currencyCode\n}\n\nfragment PageInfoFields on PageInfo {\n  hasNextPage\n  endCursor\n  hasPreviousPage\n  startCursor\n}": types.ImageFieldsFragmentDoc,
    "fragment ProductFields on Product {\n  id\n  title\n  handle\n  status\n  vendor\n  productType\n  tags\n  totalInventory\n  createdAt\n  updatedAt\n  featuredImage {\n    ...ImageFields\n  }\n  variants(first: 100) {\n    nodes {\n      ...VariantFields\n    }\n  }\n  collections(first: 10) {\n    edges {\n      node {\n        ...CollectionFields\n      }\n    }\n  }\n}\n\nfragment ProductCardFields on Product {\n  id\n  title\n  handle\n  vendor\n  featuredImage {\n    ...ImageFields\n  }\n  priceRange {\n    minVariantPrice {\n      ...MoneyFields\n    }\n    maxVariantPrice {\n      ...MoneyFields\n    }\n  }\n}\n\nfragment VariantFields on ProductVariant {\n  id\n  title\n  price\n  compareAtPrice\n  sku\n  barcode\n  inventoryQuantity\n  availableForSale\n  selectedOptions {\n    name\n    value\n  }\n  image {\n    ...ImageFields\n  }\n  inventoryItem {\n    tracked\n  }\n}": types.ProductFieldsFragmentDoc,
    "query GetCollectionsForFilters($query: String, $first: Int!, $after: String) {\n  collections(first: $first, after: $after, query: $query, sortKey: TITLE) {\n    edges {\n      node {\n        ...CollectionFilterFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n  products(first: 100) {\n    edges {\n      node {\n        productType\n        status\n      }\n    }\n  }\n}\n\nquery GetCollections($first: Int!, $after: String, $query: String) {\n  collections(first: $first, after: $after, query: $query) {\n    edges {\n      node {\n        ...CollectionFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n}\n\nquery GetCollectionByHandle($handle: String!) {\n  collectionByHandle(handle: $handle) {\n    ...CollectionDetailsFields\n    products(first: 50) {\n      edges {\n        node {\n          ...ProductCardFields\n        }\n        cursor\n      }\n      pageInfo {\n        ...PageInfoFields\n      }\n    }\n  }\n}": types.GetCollectionsForFiltersDocument,
    "query GetProducts($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        ...ProductFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n}\n\nquery GetProductById($id: ID!) {\n  product(id: $id) {\n    id\n    title\n    handle\n    vendor\n    productType\n    tags\n    totalInventory\n  }\n}": types.GetProductsDocument,
    "query GetShopInfo {\n  shop {\n    currencyCode\n    myshopifyDomain\n    email\n    name\n    plan {\n      displayName\n    }\n    billingAddress {\n      countryCode\n    }\n  }\n}": types.GetShopInfoDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment CollectionFilterFields on Collection {\n  id\n  title\n}\n\nfragment CollectionFields on Collection {\n  id\n  title\n  handle\n}\n\nfragment CollectionDetailsFields on Collection {\n  id\n  title\n  handle\n  description\n  image {\n    ...ImageFields\n  }\n  updatedAt\n}"): (typeof documents)["fragment CollectionFilterFields on Collection {\n  id\n  title\n}\n\nfragment CollectionFields on Collection {\n  id\n  title\n  handle\n}\n\nfragment CollectionDetailsFields on Collection {\n  id\n  title\n  handle\n  description\n  image {\n    ...ImageFields\n  }\n  updatedAt\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ImageFields on Image {\n  id\n  url\n  altText\n  width\n  height\n}\n\nfragment MoneyFields on MoneyV2 {\n  amount\n  currencyCode\n}\n\nfragment PageInfoFields on PageInfo {\n  hasNextPage\n  endCursor\n  hasPreviousPage\n  startCursor\n}"): (typeof documents)["fragment ImageFields on Image {\n  id\n  url\n  altText\n  width\n  height\n}\n\nfragment MoneyFields on MoneyV2 {\n  amount\n  currencyCode\n}\n\nfragment PageInfoFields on PageInfo {\n  hasNextPage\n  endCursor\n  hasPreviousPage\n  startCursor\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment ProductFields on Product {\n  id\n  title\n  handle\n  status\n  vendor\n  productType\n  tags\n  totalInventory\n  createdAt\n  updatedAt\n  featuredImage {\n    ...ImageFields\n  }\n  variants(first: 100) {\n    nodes {\n      ...VariantFields\n    }\n  }\n  collections(first: 10) {\n    edges {\n      node {\n        ...CollectionFields\n      }\n    }\n  }\n}\n\nfragment ProductCardFields on Product {\n  id\n  title\n  handle\n  vendor\n  featuredImage {\n    ...ImageFields\n  }\n  priceRange {\n    minVariantPrice {\n      ...MoneyFields\n    }\n    maxVariantPrice {\n      ...MoneyFields\n    }\n  }\n}\n\nfragment VariantFields on ProductVariant {\n  id\n  title\n  price\n  compareAtPrice\n  sku\n  barcode\n  inventoryQuantity\n  availableForSale\n  selectedOptions {\n    name\n    value\n  }\n  image {\n    ...ImageFields\n  }\n  inventoryItem {\n    tracked\n  }\n}"): (typeof documents)["fragment ProductFields on Product {\n  id\n  title\n  handle\n  status\n  vendor\n  productType\n  tags\n  totalInventory\n  createdAt\n  updatedAt\n  featuredImage {\n    ...ImageFields\n  }\n  variants(first: 100) {\n    nodes {\n      ...VariantFields\n    }\n  }\n  collections(first: 10) {\n    edges {\n      node {\n        ...CollectionFields\n      }\n    }\n  }\n}\n\nfragment ProductCardFields on Product {\n  id\n  title\n  handle\n  vendor\n  featuredImage {\n    ...ImageFields\n  }\n  priceRange {\n    minVariantPrice {\n      ...MoneyFields\n    }\n    maxVariantPrice {\n      ...MoneyFields\n    }\n  }\n}\n\nfragment VariantFields on ProductVariant {\n  id\n  title\n  price\n  compareAtPrice\n  sku\n  barcode\n  inventoryQuantity\n  availableForSale\n  selectedOptions {\n    name\n    value\n  }\n  image {\n    ...ImageFields\n  }\n  inventoryItem {\n    tracked\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCollectionsForFilters($query: String, $first: Int!, $after: String) {\n  collections(first: $first, after: $after, query: $query, sortKey: TITLE) {\n    edges {\n      node {\n        ...CollectionFilterFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n  products(first: 100) {\n    edges {\n      node {\n        productType\n        status\n      }\n    }\n  }\n}\n\nquery GetCollections($first: Int!, $after: String, $query: String) {\n  collections(first: $first, after: $after, query: $query) {\n    edges {\n      node {\n        ...CollectionFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n}\n\nquery GetCollectionByHandle($handle: String!) {\n  collectionByHandle(handle: $handle) {\n    ...CollectionDetailsFields\n    products(first: 50) {\n      edges {\n        node {\n          ...ProductCardFields\n        }\n        cursor\n      }\n      pageInfo {\n        ...PageInfoFields\n      }\n    }\n  }\n}"): (typeof documents)["query GetCollectionsForFilters($query: String, $first: Int!, $after: String) {\n  collections(first: $first, after: $after, query: $query, sortKey: TITLE) {\n    edges {\n      node {\n        ...CollectionFilterFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n  products(first: 100) {\n    edges {\n      node {\n        productType\n        status\n      }\n    }\n  }\n}\n\nquery GetCollections($first: Int!, $after: String, $query: String) {\n  collections(first: $first, after: $after, query: $query) {\n    edges {\n      node {\n        ...CollectionFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n}\n\nquery GetCollectionByHandle($handle: String!) {\n  collectionByHandle(handle: $handle) {\n    ...CollectionDetailsFields\n    products(first: 50) {\n      edges {\n        node {\n          ...ProductCardFields\n        }\n        cursor\n      }\n      pageInfo {\n        ...PageInfoFields\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetProducts($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        ...ProductFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n}\n\nquery GetProductById($id: ID!) {\n  product(id: $id) {\n    id\n    title\n    handle\n    vendor\n    productType\n    tags\n    totalInventory\n  }\n}"): (typeof documents)["query GetProducts($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        ...ProductFields\n      }\n      cursor\n    }\n    pageInfo {\n      ...PageInfoFields\n    }\n  }\n}\n\nquery GetProductById($id: ID!) {\n  product(id: $id) {\n    id\n    title\n    handle\n    vendor\n    productType\n    tags\n    totalInventory\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetShopInfo {\n  shop {\n    currencyCode\n    myshopifyDomain\n    email\n    name\n    plan {\n      displayName\n    }\n    billingAddress {\n      countryCode\n    }\n  }\n}"): (typeof documents)["query GetShopInfo {\n  shop {\n    currencyCode\n    myshopifyDomain\n    email\n    name\n    plan {\n      displayName\n    }\n    billingAddress {\n      countryCode\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;