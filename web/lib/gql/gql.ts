/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query GetCollectionsForFilters($query: String, $first: Int!, $after: String) {\n  collections(first: $first, after: $after, query: $query, sortKey: TITLE) {\n    edges {\n      node {\n        id\n        title\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n}": typeof types.GetCollectionsForFiltersDocument,
    "query GetProductById($id: ID!) {\n  product(id: $id) {\n    id\n    title\n    handle\n    vendor\n    productType\n    tags\n    totalInventory\n  }\n}": typeof types.GetProductByIdDocument,
    "query GetProductFilters {\n  shop {\n    id\n    productTypes(first: 250) {\n      edges {\n        node\n      }\n    }\n    productVendors(first: 250) {\n      edges {\n        node\n      }\n    }\n    productTags(first: 250) {\n      edges {\n        node\n      }\n    }\n  }\n}": typeof types.GetProductFiltersDocument,
    "query GetProducts($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        id\n        title\n        handle\n        status\n        vendor\n        productType\n        tags\n        totalInventory\n        createdAt\n        updatedAt\n        featuredImage {\n          id\n          url\n          altText\n          width\n          height\n        }\n        variants(first: 100) {\n          nodes {\n            id\n            title\n            price\n            compareAtPrice\n            sku\n            barcode\n            inventoryQuantity\n            availableForSale\n            selectedOptions {\n              name\n              value\n            }\n            image {\n              url\n              altText\n            }\n            inventoryItem {\n              tracked\n            }\n          }\n        }\n        collections(first: 10) {\n          edges {\n            node {\n              id\n              title\n              handle\n            }\n          }\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n  }\n}": typeof types.GetProductsDocument,
    "query GetProductsWithVariants($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        id\n        title\n        handle\n        status\n        vendor\n        productType\n        tags\n        totalInventory\n        hasOnlyDefaultVariant\n        tracksInventory\n        totalVariants\n        featuredMedia {\n          ... on MediaImage {\n            id\n            preview {\n              image {\n                id\n                altText\n                url(transform: {maxHeight: 200, maxWidth: 200})\n              }\n            }\n          }\n        }\n        variants(first: 50) {\n          edges {\n            node {\n              id\n              title\n              displayName\n              sku\n              barcode\n              price\n              compareAtPrice\n              availableForSale\n              inventoryQuantity\n              selectedOptions {\n                name\n                value\n              }\n              image {\n                id\n                altText\n                url(transform: {maxWidth: 100, maxHeight: 100})\n              }\n              inventoryItem {\n                id\n                tracked\n              }\n            }\n          }\n        }\n        collections(first: 10) {\n          edges {\n            node {\n              id\n              title\n              handle\n            }\n          }\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}": typeof types.GetProductsWithVariantsDocument,
};
const documents: Documents = {
    "query GetCollectionsForFilters($query: String, $first: Int!, $after: String) {\n  collections(first: $first, after: $after, query: $query, sortKey: TITLE) {\n    edges {\n      node {\n        id\n        title\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n}": types.GetCollectionsForFiltersDocument,
    "query GetProductById($id: ID!) {\n  product(id: $id) {\n    id\n    title\n    handle\n    vendor\n    productType\n    tags\n    totalInventory\n  }\n}": types.GetProductByIdDocument,
    "query GetProductFilters {\n  shop {\n    id\n    productTypes(first: 250) {\n      edges {\n        node\n      }\n    }\n    productVendors(first: 250) {\n      edges {\n        node\n      }\n    }\n    productTags(first: 250) {\n      edges {\n        node\n      }\n    }\n  }\n}": types.GetProductFiltersDocument,
    "query GetProducts($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        id\n        title\n        handle\n        status\n        vendor\n        productType\n        tags\n        totalInventory\n        createdAt\n        updatedAt\n        featuredImage {\n          id\n          url\n          altText\n          width\n          height\n        }\n        variants(first: 100) {\n          nodes {\n            id\n            title\n            price\n            compareAtPrice\n            sku\n            barcode\n            inventoryQuantity\n            availableForSale\n            selectedOptions {\n              name\n              value\n            }\n            image {\n              url\n              altText\n            }\n            inventoryItem {\n              tracked\n            }\n          }\n        }\n        collections(first: 10) {\n          edges {\n            node {\n              id\n              title\n              handle\n            }\n          }\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n  }\n}": types.GetProductsDocument,
    "query GetProductsWithVariants($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        id\n        title\n        handle\n        status\n        vendor\n        productType\n        tags\n        totalInventory\n        hasOnlyDefaultVariant\n        tracksInventory\n        totalVariants\n        featuredMedia {\n          ... on MediaImage {\n            id\n            preview {\n              image {\n                id\n                altText\n                url(transform: {maxHeight: 200, maxWidth: 200})\n              }\n            }\n          }\n        }\n        variants(first: 50) {\n          edges {\n            node {\n              id\n              title\n              displayName\n              sku\n              barcode\n              price\n              compareAtPrice\n              availableForSale\n              inventoryQuantity\n              selectedOptions {\n                name\n                value\n              }\n              image {\n                id\n                altText\n                url(transform: {maxWidth: 100, maxHeight: 100})\n              }\n              inventoryItem {\n                id\n                tracked\n              }\n            }\n          }\n        }\n        collections(first: 10) {\n          edges {\n            node {\n              id\n              title\n              handle\n            }\n          }\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}": types.GetProductsWithVariantsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetCollectionsForFilters($query: String, $first: Int!, $after: String) {\n  collections(first: $first, after: $after, query: $query, sortKey: TITLE) {\n    edges {\n      node {\n        id\n        title\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n}"): (typeof documents)["query GetCollectionsForFilters($query: String, $first: Int!, $after: String) {\n  collections(first: $first, after: $after, query: $query, sortKey: TITLE) {\n    edges {\n      node {\n        id\n        title\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetProductById($id: ID!) {\n  product(id: $id) {\n    id\n    title\n    handle\n    vendor\n    productType\n    tags\n    totalInventory\n  }\n}"): (typeof documents)["query GetProductById($id: ID!) {\n  product(id: $id) {\n    id\n    title\n    handle\n    vendor\n    productType\n    tags\n    totalInventory\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetProductFilters {\n  shop {\n    id\n    productTypes(first: 250) {\n      edges {\n        node\n      }\n    }\n    productVendors(first: 250) {\n      edges {\n        node\n      }\n    }\n    productTags(first: 250) {\n      edges {\n        node\n      }\n    }\n  }\n}"): (typeof documents)["query GetProductFilters {\n  shop {\n    id\n    productTypes(first: 250) {\n      edges {\n        node\n      }\n    }\n    productVendors(first: 250) {\n      edges {\n        node\n      }\n    }\n    productTags(first: 250) {\n      edges {\n        node\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetProducts($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        id\n        title\n        handle\n        status\n        vendor\n        productType\n        tags\n        totalInventory\n        createdAt\n        updatedAt\n        featuredImage {\n          id\n          url\n          altText\n          width\n          height\n        }\n        variants(first: 100) {\n          nodes {\n            id\n            title\n            price\n            compareAtPrice\n            sku\n            barcode\n            inventoryQuantity\n            availableForSale\n            selectedOptions {\n              name\n              value\n            }\n            image {\n              url\n              altText\n            }\n            inventoryItem {\n              tracked\n            }\n          }\n        }\n        collections(first: 10) {\n          edges {\n            node {\n              id\n              title\n              handle\n            }\n          }\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n  }\n}"): (typeof documents)["query GetProducts($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        id\n        title\n        handle\n        status\n        vendor\n        productType\n        tags\n        totalInventory\n        createdAt\n        updatedAt\n        featuredImage {\n          id\n          url\n          altText\n          width\n          height\n        }\n        variants(first: 100) {\n          nodes {\n            id\n            title\n            price\n            compareAtPrice\n            sku\n            barcode\n            inventoryQuantity\n            availableForSale\n            selectedOptions {\n              name\n              value\n            }\n            image {\n              url\n              altText\n            }\n            inventoryItem {\n              tracked\n            }\n          }\n        }\n        collections(first: 10) {\n          edges {\n            node {\n              id\n              title\n              handle\n            }\n          }\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n      hasPreviousPage\n      startCursor\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetProductsWithVariants($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        id\n        title\n        handle\n        status\n        vendor\n        productType\n        tags\n        totalInventory\n        hasOnlyDefaultVariant\n        tracksInventory\n        totalVariants\n        featuredMedia {\n          ... on MediaImage {\n            id\n            preview {\n              image {\n                id\n                altText\n                url(transform: {maxHeight: 200, maxWidth: 200})\n              }\n            }\n          }\n        }\n        variants(first: 50) {\n          edges {\n            node {\n              id\n              title\n              displayName\n              sku\n              barcode\n              price\n              compareAtPrice\n              availableForSale\n              inventoryQuantity\n              selectedOptions {\n                name\n                value\n              }\n              image {\n                id\n                altText\n                url(transform: {maxWidth: 100, maxHeight: 100})\n              }\n              inventoryItem {\n                id\n                tracked\n              }\n            }\n          }\n        }\n        collections(first: 10) {\n          edges {\n            node {\n              id\n              title\n              handle\n            }\n          }\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}"): (typeof documents)["query GetProductsWithVariants($first: Int!, $after: String, $query: String, $sortKey: ProductSortKeys, $reverse: Boolean) {\n  products(\n    first: $first\n    after: $after\n    query: $query\n    sortKey: $sortKey\n    reverse: $reverse\n  ) {\n    edges {\n      node {\n        id\n        title\n        handle\n        status\n        vendor\n        productType\n        tags\n        totalInventory\n        hasOnlyDefaultVariant\n        tracksInventory\n        totalVariants\n        featuredMedia {\n          ... on MediaImage {\n            id\n            preview {\n              image {\n                id\n                altText\n                url(transform: {maxHeight: 200, maxWidth: 200})\n              }\n            }\n          }\n        }\n        variants(first: 50) {\n          edges {\n            node {\n              id\n              title\n              displayName\n              sku\n              barcode\n              price\n              compareAtPrice\n              availableForSale\n              inventoryQuantity\n              selectedOptions {\n                name\n                value\n              }\n              image {\n                id\n                altText\n                url(transform: {maxWidth: 100, maxHeight: 100})\n              }\n              inventoryItem {\n                id\n                tracked\n              }\n            }\n          }\n        }\n        collections(first: 10) {\n          edges {\n            node {\n              id\n              title\n              handle\n            }\n          }\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;