/**
 * This is the Prisma schema file.
 * It contains the schema for the database.
 */

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

// Stores information about a session.
model Session {
    id               String            @id @default(uuid())
    accessToken      String?
    expires          DateTime?
    isOnline         Boolean
    scope            String?
    shop             String
    state            String
    apiKey           String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    onlineAccessInfo OnlineAccessInfo?
}

// Stores information about an online access token.
model OnlineAccessInfo {
    id                  String          @id @default(uuid())
    sessionId           String?         @unique
    expiresIn           Int
    associatedUserScope String
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt
    associatedUser      AssociatedUser?
    session             Session?        @relation(fields: [sessionId], references: [id])
}

// Stores information about an associated user.
model AssociatedUser {
    id                 String            @id @default(uuid())
    onlineAccessInfoId String?           @unique
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt
    userId             BigInt
    firstName          String
    lastName           String
    email              String
    accountOwner       Boolean
    locale             String
    collaborator       Boolean
    emailVerified      Boolean
    onlineAccessInfo   OnlineAccessInfo? @relation(fields: [onlineAccessInfoId], references: [id])
}

// Stores a bundle of products for a given shop.
model Bundle {
    id          String       @id @default(cuid())
    shop        String
    name        String
    description String?
    type        BundleType
    status      BundleStatus @default(DRAFT)

    // Shopify Integration
    mainProductId String?

    // Pricing Configuration
    discountType      DiscountType
    discountValue     Float
    minOrderValue     Float?
    maxDiscountAmount Float?

    // Marketing Assets
    images         String[]
    marketingCopy  String?
    seoTitle       String?
    seoDescription String?

    // Performance Metrics
    views       Int   @default(0)
    conversions Int   @default(0)
    revenue     Float @default(0)

    // Scheduling
    startDate DateTime?
    endDate   DateTime?

    // AI Features
    aiOptimized Boolean @default(false)
    aiScore     Float?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    bundleProducts BundleProduct[]
    abTests        ABTest[]
    automations    AutomationBundle[]
    analytics      BundleAnalytics[]
    pricingRules   PricingRuleBundle[]

    @@unique([shop, name])
    @@index([shop, status])
}

// Stores the products in a bundle.
model BundleProduct {
    id       String @id @default(cuid())
    bundleId String

    // Shopify Integration
    productId String
    variantId String?

    // Configuration
    quantity     Int     @default(1)
    displayOrder Int     @default(0)
    isMain       Boolean @default(false)
    isRequired   Boolean @default(true)

    createdAt DateTime @default(now())

    // Relations
    bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

    @@unique([bundleId, productId, variantId])
    @@index([bundleId, displayOrder])
}

// Stores information about an A/B test.
model ABTest {
    id              String       @id @default(cuid())
    shop            String
    name            String
    hypothesis      String?
    type            TestType
    status          TestStatus   @default(DRAFT)
    trafficSplit    Int          @default(50)
    duration        Int          @default(14)
    minSampleSize   Int          @default(100)
    controlBundleId String
    variantConfig   Json
    winner          String?
    significance    Float?
    improvement     Float?
    startedAt       DateTime?
    completedAt     DateTime?
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    controlBundle   Bundle       @relation(fields: [controlBundleId], references: [id])
    results         TestResult[]

    @@index([shop, status])
}

// Stores the results of an A/B test.
model TestResult {
    id          String   @id @default(cuid())
    testId      String
    variant     String
    date        DateTime @default(now())
    views       Int      @default(0)
    conversions Int      @default(0)
    revenue     Float    @default(0)
    recordedAt  DateTime @default(now())
    test        ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)

    @@unique([testId, variant, date])
}

// Stores information about an automation.
model Automation {
    id            String             @id @default(cuid())
    shop          String
    name          String
    description   String?
    status        AutomationStatus   @default(ACTIVE)
    triggerType   TriggerType
    triggerConfig Json
    conditions    Json
    actions       Json
    triggerCount  Int                @default(0)
    successCount  Int                @default(0)
    errorCount    Int                @default(0)
    lastTriggered DateTime?
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    bundles       AutomationBundle[]
    logs          AutomationLog[]

    @@index([shop, status])
}

// Stores the bundles associated with an automation.
model AutomationBundle {
    id           String     @id @default(cuid())
    automationId String
    bundleId     String
    automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
    bundle       Bundle     @relation(fields: [bundleId], references: [id], onDelete: Cascade)

    @@unique([automationId, bundleId])
}

// Stores the logs for an automation.
model AutomationLog {
    id           String     @id @default(cuid())
    automationId String
    event        String
    success      Boolean
    data         Json?
    error        String?
    createdAt    DateTime   @default(now())
    automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

    @@index([automationId, createdAt])
}

// Stores information about a pricing rule.
model PricingRule {
    id                String              @id @default(cuid())
    shop              String
    name              String
    priority          Int                 @default(0)
    status            PricingStatus       @default(ACTIVE)
    conditions        Json
    discountType      DiscountType
    discountValue     Float
    maxDiscountAmount Float?
    applicationsCount Int                 @default(0)
    revenueImpact     Float               @default(0)
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    bundles           PricingRuleBundle[]

    @@index([shop, priority])
}

// Stores the bundles associated with a pricing rule.
model PricingRuleBundle {
    id            String      @id @default(cuid())
    pricingRuleId String
    bundleId      String
    bundle        Bundle      @relation(fields: [bundleId], references: [id], onDelete: Cascade)
    pricingRule   PricingRule @relation(fields: [pricingRuleId], references: [id], onDelete: Cascade)

    @@unique([pricingRuleId, bundleId])
}

// Stores analytics for bundles.
model BundleAnalytics {
    id       String @id @default(cuid())
    bundleId String

    // Analytics
    date DateTime
    hour Int?

    // Performance
    bundleViews      Int   @default(0)
    bundleAddToCarts Int   @default(0)
    bundlePurchases  Int   @default(0)
    bundleRevenue    Float @default(0)

    // Cross Sell
    crossSellViews     Int @default(0)
    crossSellPurchases Int @default(0)

    // Conversion Rates
    newCustomerPurchases       Int @default(0)
    returningCustomerPurchases Int @default(0)

    // Relations
    bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

    @@unique([bundleId, date, hour])
    @@index([bundleId, date])
}

// Stores analytics for bundles.
model AIInsight {
    id          String        @id @default(cuid())
    shop        String
    type        AIInsightType
    category    String
    title       String
    description String
    confidence  Float
    impact      String
    actionable  Boolean       @default(true)
    actionType  String?
    actionData  Json?
    implemented Boolean       @default(false)
    views       Int           @default(0)
    applied     Int           @default(0)
    improvement Float?
    bundleId    String?
    testId      String?
    createdAt   DateTime      @default(now())
    expiresAt   DateTime?

    @@index([shop, type, confidence])
}

// Stores information about a template.
model Template {
    id              String             @id @default(cuid())
    name            String
    description     String
    category        String
    bundleType      BundleType
    difficulty      TemplateDifficulty
    bundleConfig    Json
    pricingConfig   Json
    marketingConfig Json?
    downloads       Int                @default(0)
    rating          Float?
    reviewCount     Int                @default(0)
    createdBy       String
    isPublic        Boolean            @default(false)
    isOfficial      Boolean            @default(false)
    createdAt       DateTime           @default(now())
    updatedAt       DateTime           @updatedAt
    reviews         TemplateReview[]

    @@index([category, rating])
}

// Stores information about a template review.
model TemplateReview {
    id         String   @id @default(cuid())
    templateId String
    shop       String
    rating     Int
    review     String?
    helpful    Int      @default(0)
    createdAt  DateTime @default(now())
    template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

    @@unique([templateId, shop])
}

// Stores information about a notification.
model Notification {
    id          String               @id @default(cuid())
    shop        String
    type        NotificationType
    title       String
    message     String
    data        Json?
    read        Boolean              @default(false)
    priority    NotificationPriority @default(NORMAL)
    actionLabel String?
    actionUrl   String?
    createdAt   DateTime             @default(now())
    expiresAt   DateTime?

    @@index([shop, read, createdAt])
}

// Stores information about an alert rule.
model AlertRule {
    id              String           @id @default(cuid())
    shop            String
    name            String
    type            NotificationType
    status          AlertRuleStatus  @default(ACTIVE)
    conditions      Json
    threshold       Float?
    comparison      String?
    deliveryMethods Json
    frequency       AlertFrequency   @default(IMMEDIATE)
    triggerCount    Int              @default(0)
    lastTriggered   DateTime?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt

    @@index([shop, status])
}

// Stores information about an app.
model AppSettings {
    id                   String       @id @default(cuid())
    shop                 String       @unique
    defaultDiscountType  DiscountType @default(PERCENTAGE)
    defaultDiscountValue Float        @default(10)
    maxBundleProducts    Int          @default(10)
    aiOptimizations      Boolean      @default(true)
    betaFeatures         Boolean      @default(false)
    emailNotifications   Boolean      @default(true)
    weeklyDigest         Boolean      @default(true)
    aiRecommendations    Boolean      @default(true)
    createdAt            DateTime     @default(now())
    updatedAt            DateTime     @updatedAt
}

enum BundleType {
    BUY_X_GET_Y
    BOGO
    VOLUME_DISCOUNT
    MIX_MATCH
    CROSS_SELL
    TIERED
    FLASH_SALE
    GIFT
}

enum BundleStatus {
    DRAFT
    ACTIVE
    PAUSED
    ARCHIVED
    SCHEDULED
}

enum DiscountType {
    PERCENTAGE
    FIXED
    CUSTOM_PRICE
}

enum TestType {
    PRICING
    PRODUCT_MIX
    COPY
    LAYOUT
}

enum TestStatus {
    DRAFT
    RUNNING
    COMPLETED
    STOPPED
}

enum AutomationStatus {
    ACTIVE
    PAUSED
    ARCHIVED
}

enum TriggerType {
    SCHEDULE
    PERFORMANCE
    INVENTORY
    CUSTOMER_BEHAVIOR
}

enum PricingStatus {
    ACTIVE
    INACTIVE
}

enum AIInsightType {
    RECOMMENDATION
    OPTIMIZATION
    PREDICTION
    WARNING
}

enum TemplateDifficulty {
    EASY
    MEDIUM
    HARD
}

enum NotificationType {
    BUNDLE_PERFORMANCE
    AI_RECOMMENDATION
    TEST_COMPLETED
    AUTOMATION_ERROR
    MILESTONE_REACHED
}

enum NotificationPriority {
    LOW
    NORMAL
    HIGH
    CRITICAL
}

enum AlertRuleStatus {
    ACTIVE
    PAUSED
}

enum AlertFrequency {
    IMMEDIATE
    HOURLY
    DAILY
}
